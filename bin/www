#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('chat-engine:server');
const http = require('https');
const fs = require("fs");
const { SSLApp } = require("uWebSockets.js");
const { Server } = require("socket.io");
const WebSocket = require("../socket.IO/socket");


/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
const ws_port = normalizePort(process.env.WSPORT || port + 1);
app.set('port', port);

/**
 * Create HTTP server.
 */
let server;

let cert;
let key;

try
{
    cert = fs.readFileSync("certs/cert.pem");
    key = fs.readFileSync("certs/key.pem");
    if(cert && key)
    {
        server = http.createServer({key: key, cert: cert}, app);
    }
}
catch(err)
{
    console.log(err);
    console.log("Could not find certs or error while create secure server, fallback to http server");
    if(!server && err)
    {
        server = http.createServer(app);
    }
}

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Create WebSocket server.
 */
const uws = SSLApp({cert_file_name: "certs/cert.pem", key_file_name: "certs/key.pem"});
global.io = new Server({ cors: { origin: "http://localhost:3000" } });
io.attachApp(uws);

io.on("connection", async (socket) => {
    await WebSocket.connection(socket);
});

uws.listen(ws_port, () => {
    console.log("Websocket is listening to port " + ws_port);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
